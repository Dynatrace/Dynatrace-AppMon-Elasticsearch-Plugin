apply plugin: 'java'
apply plugin: 'jacoco'

//noinspection GroovyUnusedAssignment
sourceCompatibility = 1.7

// ----- PATH SETTINGS -----
sourceSets.main.java.srcDirs = ['src']
sourceSets.main.resources.srcDirs = ['resources']
sourceSets.test.resources.srcDirs = ['testresources']

repositories {
    mavenCentral()
}

configurations {
    // exclude as many things as possible which are not needed here
    // as they would bloat the resulting bundle unnecessarily
    //
    all*.exclude group: 'org.jboss.netty'
    all*.exclude group: 'org.seleniumhq.selenium'
    all*.exclude group: 'com.atlassian.jira'
    all*.exclude group: 'struts'
    all*.exclude group: 'org.apache.struts'
    all*.exclude group: 'javax.mail'
    all*.exclude group: 'dumbster'
    all*.exclude group: 'org.swift.common'
    all*.exclude group: 'net.jpountz.lz4'
    all*.exclude group: 'com.netflix.hystrix'
    all*.exclude group: 'com.datastax.cassandra'
    all*.exclude group: 'de.sciss'
    all*.exclude group: 'org.apache.axis'
    all*.exclude group: 'axis'
    all*.exclude group: 'org.apache.velocity'
    all*.exclude group: 'velocity'
    all*.exclude group: 'org.xerial.snappy'
    all*.exclude group: 'javax.servlet'
    all*.exclude group: 'commons-fileupload'
    all*.exclude group: 'com.sumologic.api.client'

    // required when we run tests
    //all*.exclude group: 'org.eclipse.jetty'
    //all*.exclude group: 'xerces'
    //all*.exclude group: 'xalan'
}

dependencies {
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.google.guava:guava:20.0'
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.7'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.7'

    compile fileTree(dir: "lib", include: [
            'com.dynatrace.diagnostics.sdk.jar',
            'com.dynatrace.diagnostics.util.jar',
    ])

    testCompile fileTree(dir: "lib", include: [
            'org.eclipse.osgi_*.jar',
    ])

    testCompile 'junit:junit:4.+'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.easymock:easymock:3.4'

    // for MockRESTServer and MemoryLeakVerifier
    testCompile 'org.dstadler:commons-test:1.0.0.12'
}

tasks.withType(JavaCompile) {
    // avoid: :compileJavawarning: [options] bootstrap class path not set in conjunction with -source 1.7
    options.warnings = false
    options.compilerArgs = [ '-Xlint:deprecation' ]
    options.encoding = 'UTF-8'
}

test {
    //noinspection GroovyAssignabilityCheck
    systemProperties = System.properties

    systemProperty 'jsse.enableSNIExtension', 'false'

    // show standard out and standard error of the test JVM(s) on the console
    //testLogging.showStandardStreams = true

    // we get errors if a local JNA is found
    // see http://stackoverflow.com/questions/26434884/how-do-i-fix-incompatible-jna-native-library-when-using-putty-gradle-and-the
    systemProperties['jna.boot.library.path'] = null
    
    // http://forums.gradle.org/gradle/topics/jacoco_related_failure_in_multiproject_build
    systemProperties['user.dir'] = workingDir
}

jacoco {
    toolVersion = '0.7.7.201606060606'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}
