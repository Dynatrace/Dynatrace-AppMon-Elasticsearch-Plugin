apply from: 'common.gradle'
//apply plugin: 'maven-publish'
apply plugin: 'eclipse'
//apply plugin: 'idea'

// TODO: we could use the osgi-plugin of Gradle to do some of the things that we do manually here for now!

sourceCompatibility = 1.7

sourceSets.test.java.srcDirs = ['testsrc']

ext {
	if (!project.hasProperty("dynaTraceVersion")) {
	    dynaTraceVersion = '0.0.0.0000'
	}
}

dependencies {
    testCompile 'org.elasticsearch:elasticsearch:2.1.1'
	testCompile 'org.elasticsearch:elasticsearch:2.1.1:tests'
    testCompile 'org.apache.lucene:lucene-test-framework:5.3.1'

	// for MockRESTServer
	testCompile 'org.dstadler:commons-test:1.0.0.+'
}

eclipse {
	project {
		buildCommand 'org.eclipse.pde.ManifestBuilder'
		buildCommand 'org.eclipse.pde.SchemaBuilder'
		natures 'org.eclipse.pde.PluginNature'
	}
}

// work around unnecessary timestamp in generated file which always causes dirty files in version control
// https://issues.gradle.org/browse/GRADLE-2293
task adjustEclipseSettingsFile << {
   ant.replaceregexp(match:'^#.*', replace:'', flags:'g', byline:true) {
      fileset(dir: project.projectDir, includes: '.settings/org.eclipse.jdt.core.prefs')
   }
}
task sortEclipseSettingsFile << {
   new File(project.projectDir, '.settings/org.eclipse.jdt.core.prefs').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
   new File(project.projectDir, '.classpath').with { it.text = it.readLines().findAll { it }.unique().join('\n') }
}
eclipseJdt.finalizedBy adjustEclipseSettingsFile
eclipseJdt.finalizedBy sortEclipseSettingsFile

task validateXml {
	// define inputs and outputs to make the up-to-date check of Gradle work for this task
	inputs.files fileTree(dir: project.projectDir, includes: ['**/*.xml'], excludes: ['.ant-targets-build.xml'])
	outputs.files fileTree(dir: project.projectDir, includes: ['**/*.xml'], excludes: ['.ant-targets-build.xml'])
	
	doLast {
		// ensure that all the documents are at least well-formed, i.e. nobody made illegal manual changes
		ant.xmlvalidate(lenient:true) {
			fileset(dir: project.projectDir) {
				include(name: '**/*.xml')
				exclude(name: '.ant-targets-build.xml')
			}
		}
	}
}
jar.dependsOn validateXml    
//jar.dependsOn check

jar {
	manifest {
		from('META-INF/MANIFEST.MF') {
			// overwrite version in the Manifest
            eachEntry { details ->
                if (details.key == 'Bundle-Version' || details.key == 'Implementation-Version') {
                    details.value = dynaTraceVersion
                }
            }
        }
	}

	// add the OSGi pieces and the source code
	from('.') {
		include 'src/**'
		include 'compuwareBSD.txt'
		include 'plugin*.xml'
		include 'plugin*.properties'
		include 'META-INF/**'
	}

	// add all compile dependencies
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/**'
        exclude 'OSGI-INF/**'
        exclude 'lib/**'
    	exclude '*.properties'
    	exclude '*.xml'
    	exclude '*.html'
    	exclude '*.png'
    	exclude '*.gif'
    	exclude '*.xcf'
    	exclude '*.jks'
    	exclude '*.css'
    	exclude '*.js'
    	exclude '*.ico'
    	exclude 'css/**'
    	exclude 'font-awesome/**'
    	exclude 'js/**'
    	exclude 'com/dynatrace/diagnostics/**'
		exclude 'org/eclipse/osgi/**'
		exclude 'org/osgi/**'
    	exclude 'icons/**'
        exclude 'prefuse/**'
        exclude 'dashboards/**'
        exclude 'profiles/**'
        exclude 'fonts/**'
        exclude 'schema/**'
        exclude 'velocity/**'
        exclude 'img/**'
        exclude 'buttons/**'
        exclude 'sb-admin-v2/**'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}

configurations {
    junitAnt
}

dependencies {
    junitAnt 'junit:junit:4.+'
    junitAnt('org.apache.ant:ant-junit:1.9.3') {
        transitive = false
    }
    junitAnt('org.apache.ant:ant-junit4:1.9.3') {
        transitive = false
     }
}
ant.taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask',
             classpath: configurations.junitAnt.asPath)

task plugin(dependsOn: jar) {
	description = 'Prepares the .dtp file by copying files in place'

	println "Building plugin with version " + dynaTraceVersion

	doLast {
		ant.copy(todir: 'plugin/plugin', file:'build/libs/Dynatrace-Elasticsearch-Plugin.jar', verbose:true)
		ant.replaceregexp(file:'plugin/META-INF/MANIFEST.MF', match:'Bundle-Version: \\d+.\\d+.\\d+.\\d+', replace:'Bundle-Version: ' + dynaTraceVersion)
		ant.ant(antfile:'plugin/build.xml', inheritAll:'false') {
			property(name:'version',value:dynaTraceVersion)
		}
	}
}
